datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Currency {
  id        String          @id @default(uuid())
  code      String          @unique
  name      String
  symbol    String
  accounts  Account[]
  instruments Instrument[]
  ledgerEntries LedgerEntry[]
  transactions Transaction[]
  balances  AccountBalance[]

  @@map("currencies")
}

model AssetClass {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  instruments Instrument[]

  @@map("asset_classes")
}

model Instrument {
  id           String        @id @default(uuid())
  symbol       String        @unique
  name         String
  assetClassId String        @map("asset_class_id")
  assetClass   AssetClass    @relation(fields: [assetClassId], references: [id])
  lotSize      Decimal       @db.Decimal(18, 8) @map("lot_size")
  tickSize     Decimal       @db.Decimal(18, 8) @map("tick_size")
  currencyId   String        @map("currency_id")
  currency     Currency      @relation(fields: [currencyId], references: [id])
  createdAt    DateTime      @default(now()) @map("created_at")
  orders       Order[]
  executions   Execution[]
  positions    Position[]
  marketQuotes MarketQuote[]

  @@map("instruments")
}

model OrderSide {
  id          Int      @id @default(autoincrement()) @map("id") @db.SmallInt
  code        String   @unique
  description String?
  orders      Order[]

  @@map("order_sides")
}

model OrderStatus {
  id          Int      @id @default(autoincrement()) @map("id") @db.SmallInt
  code        String   @unique
  description String?
  orders      Order[]

  @@map("order_statuses")
}

model OrderType {
  id          Int      @id @default(autoincrement()) @map("id") @db.SmallInt
  code        String   @unique
  description String?
  orders      Order[]

  @@map("order_types")
}

model TimeInForceType {
  id          Int      @id @default(autoincrement()) @map("id") @db.SmallInt
  code        String   @unique
  description String?
  orders      Order[]

  @@map("time_in_force_types")
}

model Account {
  id             String            @id @default(uuid())
  account_name   String
  currency_id    String
  currency       Currencies        @relation(fields: [currency_id], references: [id])
  created_at     DateTime          @default(now())
  is_primary     Boolean
  orders         Orders[]
  positions      Positions[]
  ledger_entries LedgerEntries[]
  transactions   Transactions[]
  balance        AccountBalances?
  username       String            @unique
  email          String            @unique
  password       String
  provider       String
  @@map("ACCOUNT")
}

model Currencies {
  id             String            @id @default(uuid())
  code           String            @unique
  name           String
  symbol         String
  accounts       Account[]
  instruments    Instruments[]
  ledger_entries LedgerEntries[]
  transactions   Transactions[]
  accountBalances AccountBalances[]

  @@map("CURRENCIES")
}

model AssetClasses {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  instruments Instruments[]

  @@map("ASSET_CLASSES")
}

model Instruments {
  id             String         @id @default(uuid())
  symbol         String         @unique
  name           String
  asset_class_id String
  asset_class    AssetClasses   @relation(fields: [asset_class_id], references: [id])
  lot_size       Decimal
  tick_size      Decimal
  currency_id    String
  currency       Currencies     @relation(fields: [currency_id], references: [id])
  created_at     DateTime       @default(now())
  orders         Orders[]
  executions     Executions[]
  positions      Positions[]
  market_quotes  MarketQuotes[]

  @@map("INSTRUMENTS")
}

model OrderSides {
  id          Int       @id
  code        String    @unique
  description String
  orders      Orders[]

  @@map("ORDER_SIDES")
}

model OrderStatuses {
  id          Int       @id
  code        String    @unique
  description String
  orders      Orders[]

  @@map("ORDER_STATUSES")
}

model OrderTypes {
  id          Int       @id
  code        String    @unique
  description String
  orders      Orders[]

  @@map("ORDER_TYPES")
}

model TimeInForceTypes {
  id          Int       @id
  code        String    @unique
  description String
  orders      Orders[]

  @@map("TIME_IN_FORCE_TYPES")
}

model Orders {
  id                 String        @id @default(uuid())
  account_id         String
  account            Account      @relation(fields: [account_id], references: [id])
  instrument_id      String
  instrument         Instruments   @relation(fields: [instrument_id], references: [id])
  side_id            Int
  side               OrderSides    @relation(fields: [side_id], references: [id])
  type_id            Int
  type               OrderTypes    @relation(fields: [type_id], references: [id])
  status_id          Int
  status             OrderStatuses @relation(fields: [status_id], references: [id])
  time_in_force_id   Int
  time_in_force      TimeInForceTypes @relation(fields: [time_in_force_id], references: [id])
  client_order_id    String        @unique
  price              Decimal?
  quantity           Decimal
  filled_quantity    Decimal?
  remaining_quantity Decimal?
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  executions         Executions[]

  @@map("ORDERS")
}

model Executions {
  id                   String      @id @default(uuid())
  order_id             String
  order                Orders      @relation(fields: [order_id], references: [id])
  instrument_id        String
  instrument           Instruments @relation(fields: [instrument_id], references: [id])
  counterparty_order_id String?
  price                Decimal
  quantity             Decimal
  executed_at          DateTime
  liquidity            String?

  @@map("EXECUTIONS")
}

model Positions {
  id             String      @id @default(uuid())
  account_id     String
  account        Account    @relation(fields: [account_id], references: [id])
  instrument_id  String
  instrument     Instruments @relation(fields: [instrument_id], references: [id])
  quantity       Decimal
  average_price  Decimal
  updated_at     DateTime    @updatedAt

  @@map("POSITIONS")
}

model LedgerEntryTypes {
  id          Int            @id
  code        String         @unique
  description String
  category    String?
  entries     LedgerEntries[]

  @@map("LEDGER_ENTRY_TYPES")
}

model LedgerEntries {
  id              String            @id @default(uuid())
  account_id      String
  account         Account          @relation(fields: [account_id], references: [id])
  entry_type_id   Int
  entry_type      LedgerEntryTypes  @relation(fields: [entry_type_id], references: [id])
  amount          Decimal
  currency_id     String
  currency        Currencies        @relation(fields: [currency_id], references: [id])
  reference_id    String?
  reference_table String?
  created_at      DateTime          @default(now())

  @@map("LEDGER_ENTRIES")
}

model AccountBalances {
  account_id  String   @id
  account     Account @relation(fields: [account_id], references: [id])
  available   Decimal
  reserved    Decimal
  total       Decimal
  currency_id String
  currency    Currencies @relation(fields: [currency_id], references: [id])
  updated_at  DateTime   @updatedAt

  @@map("ACCOUNT_BALANCES")
}

model MarketQuotes {
  id            BigInt      @id @default(autoincrement())
  instrument_id String
  instrument    Instruments  @relation(fields: [instrument_id], references: [id])
  bid_price     Decimal?
  ask_price     Decimal?
  last_price    Decimal?
  volume        Decimal?
  ts            DateTime

  @@map("MARKET_QUOTES")
}

model TransactionTypes {
  id          Int           @id
  code        String        @unique
  description String
  category    String?
  transactions Transactions[]

  @@map("TRANSACTION_TYPES")
}

model TransactionStatuses {
  id          Int           @id
  code        String        @unique
  description String
  transactions Transactions[]

  @@map("TRANSACTION_STATUSES")
}

model Transactions {
  id            String               @id @default(uuid())
  account_id    String
  account       Account              @relation(fields: [account_id], references: [id])
  tx_type_id    Int
  tx_type       TransactionTypes     @relation(fields: [tx_type_id], references: [id])
  status_id     Int
  status        TransactionStatuses  @relation(fields: [status_id], references: [id])
  amount        Decimal
  currency_id   String
  currency      Currencies           @relation(fields: [currency_id], references: [id])
  external_ref  String?
  created_at    DateTime             @default(now())
  updated_at    DateTime             @updatedAt

  @@map("TRANSACTIONS")
}

model ActorTypes {
  id          Int        @id
  code        String     @unique
  description String
  audit_logs  AuditLog[]

  @@map("ACTOR_TYPES")
}

model ActionTypes {
  id          Int        @id
  code        String     @unique
  description String
  category    String?
  audit_logs  AuditLog[]

  @@map("ACTION_TYPES")
}

model ObjectTypes {
  id          Int        @id
  code        String     @unique
  description String
  audit_logs  AuditLog[]

  @@map("OBJECT_TYPES")
}

model AuditLog {
  id              String       @id @default(uuid())
  actor_id        String?
  actor_type_id   Int
  actor_type      ActorTypes   @relation(fields: [actor_type_id], references: [id])
  action_id       Int
  action          ActionTypes  @relation(fields: [action_id], references: [id])
  object_type_id  Int
  object_type     ObjectTypes  @relation(fields: [object_type_id], references: [id])
  object_id       String?
  old_values      Json?
  new_values      Json?
  created_at      DateTime     @default(now())

  @@map("AUDIT_LOG")
}